unsigned char ReverseBitsObvious(unsigned char v)
{
    unsigned char r = v;
    int s = sizeof(v) * CHAR_BIT - 1;

    for (v >>= 1; v; v >>= 1)
    {
        r <<= 1;
        r |= v & 1;
        s--;
    }

    r <<= s;
    return r;
}

_ReverseBitsObvious:
	mov.w	r9, #0
	movs	r1, #7
	cmp.w	r9, r0, lsr #1
	beq	LBB0_3
	lsrs	r3, r0, #1
LBB0_2:
	lsls	r0, r0, #1
	and	r12, r3, #254
	and	r2, r3, #1
	uxtb	r0, r0
	orrs	r0, r2
	subs	r1, #1
	lsr.w	r3, r12, #1
	cmp.w	r9, r12, lsr #1
	bne	LBB0_2
LBB0_3:
	lsls	r0, r1
	uxtb	r0, r0
	bx	lr



unsigned char ReverseBitsLookupTable(unsigned char v)
{
    return BitReverseTable256[v];
}

_ReverseBitsLookupTable:
	movw	r1, :lower16:(_BitReverseTable256-(LPC1_0+4))
	movt	r1, :upper16:(_BitReverseTable256-(LPC1_0+4))
LPC1_0:
	add	r1, pc
	ldrb	r0, [r1, r0]
	bx	lr



unsigned char ReverseBits3ops64bit(unsigned char v)
{
    return (v * 0x0202020202ULL & 0x010884422010ULL) % 1023;
}

_ReverseBits3ops64bit:
	push	{r7, lr}
	mov	r1, r0
	mov.w	r2, #33686018
	umull	r0, r2, r1, r2
	movw	r3, #8208
	movt	r3, #33858
	mov	r7, sp
	add.w	r1, r2, r1, lsl #1
	ands	r0, r3
	and	r1, r1, #264
	movw	r2, #1023
	movs	r3, #0
	blx	___umoddi3
	uxtb	r0, r0
	pop	{r7, pc}



unsigned char ReverseBits4ops64bit(unsigned char v)
{
    return ((v * 0x80200802ULL) & 0x0884422110ULL) * 0x0101010101ULL >> 32;
}

_ReverseBits4ops64bit:
	movw	r1, #2050
	movw	r2, #8464
	movt	r1, #32800
	movt	r2, #33858
	umull	r1, r0, r0, r1
	mov.w	r9, #16843009
	ands	r2, r1
	and	r0, r0, #8
	umull	r1, r3, r2, r9
	add	r2, r3
	mla	r0, r0, r9, r2
	uxtb	r0, r0
	bx	lr



unsigned char ReverseBits7ops32bit(unsigned char v)
{
    return ((v * 0x0802LU & 0x22110LU) | (v * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
}

_ReverseBits7ops32bit:
	add.w	r0, r0, r0, lsl #10
	movt	r1, #8
	movw	r2, #8464
	and.w	r1, r1, r0, lsl #5
	movt	r2, #2
	and.w	r0, r2, r0, lsl #1
	movw	r2, #257
	orrs	r0, r1
	movt	r2, #1
	muls	r0, r2, r0
	ubfx	r0, r0, #16, #8
	bx	lr



unsigned char ReverseBits5logNops1(unsigned char v)
{
    v = ((v >> 1) & 0x55) | ((v & 0x55) << 1);
    v = ((v >> 2) & 0x33) | ((v & 0x33) << 2);
    v = ((v >> 4) & 0x0F) | ((v & 0x0F) << 4);
    return v;
}

_ReverseBits5logNops1:
	movs	r1, #170
	movs	r2, #85
	and.w	r1, r1, r0, lsl #1
	and.w	r0, r2, r0, lsr #1
	orrs	r0, r1
	movs	r1, #204
	movs	r2, #51
	and.w	r1, r1, r0, lsl #2
	and.w	r0, r2, r0, lsr #2
	orrs	r0, r1
	lsrs	r1, r0, #4
	orr.w	r0, r1, r0, lsl #4
	uxtb	r0, r0
	bx	lr



unsigned char ReverseBits5logNops2(unsigned char v)
{
    unsigned int s = sizeof(v) * CHAR_BIT;
    unsigned int mask = ~0;
    while ((s >>= 1) > 0)
    {
        mask ^= (mask << s);
        v = ((v >> s) & mask) | ((v << s) & ~mask);
    }
    
    return v;
}

_ReverseBits5logNops2:
	mov.w	r1, #-1
	movs	r2, #4
	mov.w	r9, #0
LBB6_1:
	lsl.w	r3, r1, r2
	eors	r1, r3
	uxtb	r3, r0
	cmp.w	r9, r2, lsr #1
	lsr.w	r0, r3, r2
	and.w	r12, r0, r1
	eor	r0, r1, #255
	lsl.w	r3, r3, r2
	and.w	r0, r0, r3
	lsr.w	r3, r2, #1
	orr.w	r0, r0, r12
	mov	r2, r3
	bne	LBB6_1
	uxtb	r0, r0
	bx	lr



unsigned char ReverseBitsRBIT(unsigned char v)
{
    uint32_t input = v;
    uint32_t output;
    __asm__("rbit %0, %1\n" : "=r"(output) : "r"(input));
    return (output >> 24);
}

_ReverseBitsRBIT:
	rbit r0, r0
	lsrs	r0, r0, #24
	bx	lr
